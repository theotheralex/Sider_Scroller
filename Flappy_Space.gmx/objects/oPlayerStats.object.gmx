<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player stats object
display_set_gui_size(view_wview[0], view_hview[0]);

//Initialize some variables
hp = 3;
maxhp = 3;
global.brstrate = 1;
global.maxbrst = (global.brstrate*100);
global.brst = (global.brstrate*100);


score = 0;
highscore = 0;
time = 0;

global.perbrst = (global.brst*1.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//To Start the game
var start = keyboard_check_released(vk_space);

if (gamepad_is_connected(0))
    {
        start = gamepad_button_check_released(0, gp_start);
    }

if (start == true &amp;&amp; room = rMenu)
    {
        room_goto(rLevel1);
    }
    
if (start == true &amp;&amp; room = rHighScore)
    {
        room_goto(rMenu);
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the stats
switch(room)
    {
        case rMenu:
            score = 0;
            global.brst = 0;
            draw_set_halign(fa_center);
            draw_set_font(fnt_title);
            draw_text_color(room_width/2+4, 32+6, "Super Space Shooter", c_black, c_black, c_black, c_black, 1)
            draw_text_color(room_width/2, 32, "Super Space Shooter", c_white, c_white, c_white, c_white, 1)
            
            var str;
            if (gamepad_is_connected(0))
                {
                    str = "Press Start to Play";
                }
            else
                {
                    str = "Press Space to Play";
                }
            
            draw_set_font(fnt_start);
            draw_text_color(room_width/2+2, room_height-44, str, c_black, c_black, c_black, c_black, 1)
            draw_text_color(room_width/2, room_height-48, str, c_white, c_white, c_white, c_white, 1)
            break;
            
            case rHighScore:
            var str;
            if (gamepad_is_connected(0))
                {
                    str = "Press Start to Play";
                }
            else
                {
                    str = "Press Space to Play";
                }
            draw_set_halign(fa_center);
            draw_text_color(view_wview[0]/2, 64, "Your score was: " +string(score), c_white, c_white, c_white, c_white, 1)
            draw_text_color(view_wview[0]/2, 95, "The Highscore is: "+string(highscore), c_white, c_white, c_white, c_white, 1)
            draw_text_color(view_wview[0]/2, 186, str, c_white, c_white, c_white, c_white, 1)
            break;
            
            
        default:
        // Draw the hearts spaces
for (var i=0; i&lt;maxhp; i++)
    {
        draw_sprite_ext(sHeart, 0, 240+i*18, 220, 1, 1, 0, c_black, .5);
    }

// Draw the hearts
for (var i=0; i&lt;hp; i++)
    {
        draw_sprite_ext(sHeart, 0, 240+i*18, 220, 1, 1, 0, c_white, 1);
    }

  // Draw the burst
draw_healthbar(230, 200, 285, 210, global.brst,c_black,c_dkgray,c_dkgray,0,true,false);
draw_text_color(257, 197, abs(global.brst), c_white, c_white, c_white, c_white, 1)
   
// Draw the score
draw_set_halign(fa_center);
draw_set_font(fnt_score);
draw_text_color(view_wview[0]/2, 8, "Score: "+ string(score), c_white, c_white, c_white, c_white, 1)
            break;
    }



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
